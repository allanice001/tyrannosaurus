# Build, test, and publish to releases, packages, PyPi, etc.
# Runs when creating a Github release
name: publish
on:
  release:
    types: [published]
  repository_dispatch:
    types: [release-made]
jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: read action options
        id: read_options
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: .github/action-options.json
          prop_path: 'use_slack'
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install build meta-dependencies
        run: |
          pip install poetry tox
      - name: Test with tox
        run: |
          tox -v
      - name: Build sdists and wheels with Poetry
        run: |
          poetry build
          poetry install
      - name: Build the Docker image
        run: |
          docker build .
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker # defaults to "docker-containerized"
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ GITHUB_REPOSITORY }}/${{ github.event.release.tag_name }}
      - name: Attach artifacts to the GitHub release
        uses: skx/github-action-publish-binaries@master
        with:
          args: "dist/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to PyPi
        run: |
          poetry publish -vv --username __token__ --password ${{ secrets.PYPI_TOKEN }}
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,action,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always() && steps.read_options.outputs.USE_SLACK=='true'
