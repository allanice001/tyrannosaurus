"""
Metadata for this $${project}.

Original source: https://github.com/$${user}/$${project}
$${license.header}
"""
import logging
from typing import Sequence
from pathlib import Path
try:
    from importlib.metadata import PackageNotFoundError
    from importlib.metadata import metadata as __load
except ImportError:  # pragma: no cover
    from importlib_metadata import PackageNotFoundError
    from importlib_metadata import metadata as __load


pkg = Path(__file__).parent.name
logger = logging.getLogger(pkg)
metadata = None
try:
    metadata = __load(pkg)
    __status__ = "$${status.dunder}"
    __copyright__ = "Copyright $${today.year}"
    __date__ = "$${today}"
    __uri__ = metadata["home-page"]
    __title__ = metadata["name"]
    __summary__ = metadata["summary"]
    __license__ = metadata["license"]
    __version__ = metadata["version"]
    __author__ = metadata["author"]
    __maintainer__ = metadata["maintainer"]
    __contact__ = metadata["maintainer"]
except PackageNotFoundError:  # pragma: no cover
    logger.error(f"Could not load package metadata for {pkg}. Is it installed?")


class $${Pkg}Assets:
    """
    Utilities and resources for ${Project}.
    """
    @classmethod
    def path(cls, *nodes: str) -> Path:
        """
        Gets the path of an asset under ``resources/``.

        Args:
            nodes: Path nodes underneath ``resources/``

        Raises:
            FileNotFoundError: If the path does not exist
        """
        path = Path(__file__.parent, "resources", *nodes)
        if not path.exists():
            raise FileNotFoundError(f"Asset {path} not found")
        return path


if __name__ == "__main__":  # pragma: no cover
    if metadata is not None:
        print(f"{pkg} (v{metadata['version']})")
    else:
        print(f"Unknown project info for {pkg}")
